{
    "appName": "Java Interview Question Answer App",
    "version": "1.0",
    "aboutTitle": "About Title",
    "aboutDesc": "About Description",
    "timestamp": "1234567",
    "qaList": [
        {
            "id": "1",
            "q": "What is immutable object in Java? Can you change values of a immutable object?",
            "a": "A Java object is considered immutable when its state cannot change after it is created. Use of immutable objects is widely accepted as a sound strategy for creating simple, reliable code. Immutable objects are particularly useful in concurrent applications. Since they cannot change state, they cannot be corrupted by thread interference or observed in an inconsistent state. java.lang.String and java.lang.Integer classes are the Examples of immutable objects from the Java Development Kit. Immutable objects simplify your program due to following characteristics : <ul><li>Immutable objects are simple to use test and construct.</li><li>Immutable objects are automatically thread-safe.</li><li>Immutable objects do not require a copy constructor. </li><li>Immutable objects do not require an implementation of clone. </li><li>Immutable objects allow hashCode to use lazy initialization, and to cache its return value.</li><li>Immutable objects do not need to be copied defensively when used as a field. </li><li>Immutable objects are good Map keys and Set elements (Since state of these objects must not change while stored in a collection).</li><li>Immutable objects have their class invariant established once upon construction, and it never needs to be checked again.</li><li>Immutable objects always have 'failure atomicity' (a term used by Joshua Bloch) : if an immutable object throws an exception, it's never left in an undesirable or indeterminate state.</li>",
            "category": "Core Java"
        },
        {
            "id": "2",
            "q": "TestQuestion",
            "a": "Testanswer",
            "category": "Serialization"
        },
        {
            "id": "3",
            "q": "How to create a immutable object in Java? Does all property of immutable object needs to be final?",
            "a": "To create a object immutable You need to make the class final and all its member final so that once objects gets crated no one can modify its state. You can achieve same functionality by making member as non final but private and not modifying them except in constructor. Also its NOT necessary to have all the properties final since you can achieve same functionality by making member as non final but private and not modifying them except in constructor. ",
            "category": "Core Java"
        },
        {
            "id": "4",
            "q": "TestQuestion",
            "a": "Testanswer",
            "category": "Multi Threading"
        },
        {
            "id": "5",
            "q": "Questions Five",
            "a": "Testanswer 5",
            "category": "Multi Threading"
        },
        {
            "id": "6",
            "q": "Question 6",
            "a": "Testanswer 6",
            "category": "Multi Threading"
        },
        {
            "id": "7",
            "q": "Test Question 7",
            "a": "Test answer 7",
            "category": "Multi Threading"
        },
        {
            "id": "8",
            "q": "Test Question 8",
            "a": "Test answer 8",
            "category": "Multi Threading"
        },
        {
            "id": "9",
            "q": "Test Question 9",
            "a": "Test answer 9",
            "category": "Multi Threading"
        },
        {
            "id": "10",
            "q": "Test Question 10",
            "a": "Test answer 10",
            "category": "Multi Threading"
        },
        {
            "id": "11",
            "q": "Test Question 11",
            "a": "Test answer 11",
            "category": "Multi Threading"
        },
        {
            "id": "12",
            "q": "Test Question 12",
            "a": "Test answer 12",
            "category": "Multi Threading"
        },
        {
            "id": "13",
            "q": "Test Question 13",
            "a": "Test answer 13",
            "category": "Multi Threading"
        },
        {
            "id": "14",
            "q": "Test Question 14",
            "a": "Test answer 14",
            "category": "Multi Threading"
        },
        {
            "id": "15",
            "q": "Test Question 15",
            "a": "Test answer 15",
            "category": "Multi Threading"
        },
        {
            "id": "16",
            "q": "Test Question 16",
            "a": "Test answer 16",
            "category": "Multi Threading"
        },
        {
            "id": "17",
            "q": "Test Question 17",
            "a": "Test answer 17",
            "category": "Multi Threading"
        },
        {
            "id": "18",
            "q": "Test Question 18",
            "a": "Test answer 18",
            "category": "Multi Threading"
        },
        {
            "id": "19",
            "q": "Test Question 19",
            "a": "Test answer 19",
            "category": "Multi Threading"
        },
        {
            "id": "20",
            "q": "Test Question 20",
            "a": "Test answer 20",
            "category": "Multi Threading"
        },
        {
            "id": "21",
            "q": "Test Question 21",
            "a": "Test answer 21",
            "category": "Multi Threading"
        },
        {
            "id": "22",
            "q": "Test Question 22",
            "a": "Test answer 22",
            "category": "Multi Threading"
        },
        {
            "id": "23",
            "q": "Test Question 23",
            "a": "Test answer 23",
            "category": "Multi Threading"
        },
        {
            "id": "24",
            "q": "Test Question 24",
            "a": "Test answer 24",
            "category": "Multi Threading"
        }
    ]
}